{
  "messages": [
    {
      "id": "msg_1758020866993_m428ru2ys",
      "type": "document",
      "content": "# Node.js Fundamentals\n\n## Table of Contents\n\n1. [Overview](#overview)\n2. [JavaScript ES6+ Features](#javascript-es6-features)\n3. [Node.js Runtime](#nodejs-runtime)\n4. [Asynchronous Programming](#asynchronous-programming)\n5. [Modules and NPM](#modules-and-npm)\n6. [File System Operations](#file-system-operations)\n7. [HTTP and Web Servers](#http-and-web-servers)\n8. [Event-Driven Programming](#event-driven-programming)\n9. [Error Handling](#error-handling)\n10. [Best Practices](#best-practices)\n\n## Overview\n\n### Learning Objectives\n\n- Master JavaScript ES6+ features\n- Understand Node.js runtime and event loop\n- Learn asynchronous programming with Promises and async/await\n- Build web servers and APIs\n- Apply Node.js best practices\n\n### What is Node.js?\n\nNode.js is a JavaScript runtime built on Chrome's V8 engine that allows you to run JavaScript on the server side. It's designed for building scalable network applications.\n\n## JavaScript ES6+ Features\n\n### 1. Modern JavaScript Syntax\n\n```javascript\n// Arrow functions\nconst add = (a, b) => a + b;\nconst square = x => x * x;\n\n// Template literals\nconst name = 'John';\nconst age = 30;\nconst message = `Hello, ${name}! You are ${age} years old.`;\n\n// Destructuring\nconst person = { name: 'Alice', age: 25, city: 'New York' };\nconst { name, age, city } = person;\n\nconst numbers = [1, 2, 3, 4, 5];\nconst [first, second, ...rest] = numbers;\n\n// Spread operator\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst merged = { ...obj1, ...obj2 };\n\n// Default parameters\nfunction greet(name = 'World') {\n    return `Hello, ${name}!`;\n}\n\n// Rest parameters\nfunction sum(...numbers) {\n    return numbers.reduce((total, num) => total + num, 0);\n}\n\n// Classes\nclass Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    greet() {\n        return `Hello, I'm ${this.name}`;\n    }\n    \n    static createAdult(name) {\n        return new Person(name, 18);\n    }\n}\n\n// Inheritance\nclass Student extends Person {\n    constructor(name, age, grade) {\n        super(name, age);\n        this.grade = grade;\n    }\n    \n    study() {\n        return `${this.name} is studying`;\n    }\n}\n\n// Modules\nexport const PI = 3.14159;\nexport function circleArea(radius) {\n    return PI * radius * radius;\n}\n\nexport default class Calculator {\n    add(a, b) {\n        return a + b;\n    }\n}\n```\n\n### 2. Advanced JavaScript Features\n\n```javascript\n// Promises\nfunction fetchData(url) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (url) {\n                resolve({ data: 'Some data', url });\n            } else {\n                reject(new Error('Invalid URL'));\n            }\n        }, 1000);\n    });\n}\n\n// Async/await\nasync function processData() {\n    try {\n        const result = await fetchData('https://api.example.com');\n        console.log('Data:', result);\n        return result;\n    } catch (error) {\n        console.error('Error:', error.message);\n        throw error;\n    }\n}\n\n// Generators\nfunction* numberGenerator() {\n    let num = 1;\n    while (true) {\n        yield num++;\n    }\n}\n\nconst gen = numberGenerator();\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\n\n// Map and Set\nconst map = new Map();\nmap.set('key1', 'value1');\nmap.set('key2', 'value2');\nconsole.log(map.get('key1')); // value1\n\nconst set = new Set([1, 2, 3, 3, 4]);\nconsole.log(set.size); // 4\n\n// WeakMap and WeakSet\nconst weakMap = new WeakMap();\nconst obj = {};\nweakMap.set(obj, 'some value');\n\n// Symbol\nconst sym1 = Symbol('description');\nconst sym2 = Symbol('description');\nconsole.log(sym1 === sym2); // false\n\n// Proxy\nconst target = { name: 'John' };\nconst proxy = new Proxy(target, {\n    get(target, prop) {\n        console.log(`Getting ${prop}`);\n        return target[prop];\n    },\n    set(target, prop, value) {\n        console.log(`Setting ${prop} to ${value}`);\n        target[prop] = value;\n        return true;\n    }\n});\n```\n\n## Node.js Runtime\n\n### 1. Event Loop and V8 Engine\n\n```javascript\n// Understanding the event loop\nconsole.log('1. Synchronous code');\n\nsetTimeout(() => {\n    console.log('2. setTimeout callback');\n}, 0);\n\nsetImmediate(() => {\n    console.log('3. setImmediate callback');\n});\n\nprocess.nextTick(() => {\n    console.log('4. nextTick callback');\n});\n\nconsole.log('5. More synchronous code');\n\n// Output:\n// 1. Synchronous code\n// 5. More synchronous code\n// 4. nextTick callback\n// 2. setTimeout callback\n// 3. setImmediate callback\n\n// Process object\nconsole.log('Process ID:', process.pid);\nconsole.log('Node version:', process.version);\nconsole.log('Platform:', process.platform);\nconsole.log('Architecture:', process.arch);\n\n// Environment variables\nconsole.log('NODE_ENV:', process.env.NODE_ENV);\nconsole.log('PORT:', process.env.PORT || 3000);\n\n// Command line arguments\nconsole.log('Arguments:', process.argv);\n\n// Memory usage\nconst memUsage = process.memoryUsage();\nconsole.log('Memory usage:', {\n    rss: Math.round(memUsage.rss / 1024 / 1024) + ' MB',\n    heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024) + ' MB',\n    heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024) + ' MB',\n    external: Math.round(memUsage.external / 1024 / 1024) + ' MB'\n});\n\n// Exit handlers\nprocess.on('exit', (code) => {\n    console.log(`Process exiting with code: ${code}`);\n});\n\nprocess.on('SIGINT', () => {\n    console.log('Received SIGINT. Graceful shutdown...');\n    process.exit(0);\n});\n```\n\n## Asynchronous Programming\n\n### 1. Callbacks, Promises, and Async/Await\n\n```javascript\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// Callback pattern (older style)\nfunction readFileCallback(filename, callback) {\n    fs.readFile(filename, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n\n// Promise pattern\nfunction readFilePromise(filename) {\n    return fs.readFile(filename, 'utf8')\n        .then(data => {\n            console.log('File read successfully');\n            return data;\n        })\n        .catch(err => {\n            console.error('Error reading file:', err);\n            throw err;\n        });\n}\n\n// Async/await pattern\nasync function readFileAsync(filename) {\n    try {\n        const data = await fs.readFile(filename, 'utf8');\n        console.log('File read successfully');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        throw err;\n    }\n}\n\n// Promise.all for parallel execution\nasync function readMultipleFiles(filenames) {\n    try {\n        const promises = filenames.map(filename => fs.readFile(filename, 'utf8'));\n        const results = await Promise.all(promises);\n        return results;\n    } catch (err) {\n        console.error('Error reading files:', err);\n        throw err;\n    }\n}\n\n// Promise.allSettled for handling partial failures\nasync function readFilesWithPartialFailure(filenames) {\n    const promises = filenames.map(filename => \n        fs.readFile(filename, 'utf8')\n            .then(data => ({ status: 'fulfilled', value: data, filename }))\n            .catch(err => ({ status: 'rejected', reason: err, filename }))\n    );\n    \n    const results = await Promise.allSettled(promises);\n    return results;\n}\n\n// Race condition handling\nasync function fetchWithTimeout(url, timeout = 5000) {\n    const fetchPromise = fetch(url);\n    const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Timeout')), timeout)\n    );\n    \n    return Promise.race([fetchPromise, timeoutPromise]);\n}\n```\n\n### 2. Advanced Async Patterns\n\n```javascript\n// Async generator\nasync function* asyncGenerator() {\n    for (let i = 0; i < 5; i++) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        yield i;\n    }\n}\n\nasync function consumeAsyncGenerator() {\n    for await (const value of asyncGenerator()) {\n        console.log('Generated value:', value);\n    }\n}\n\n// Semaphore for limiting concurrent operations\nclass Semaphore {\n    constructor(permits) {\n        this.permits = permits;\n        this.waiting = [];\n    }\n    \n    async acquire() {\n        if (this.permits > 0) {\n            this.permits--;\n            return;\n        }\n        \n        return new Promise(resolve => {\n            this.waiting.push(resolve);\n        });\n    }\n    \n    release() {\n        if (this.waiting.length > 0) {\n            const resolve = this.waiting.shift();\n            resolve();\n        } else {\n            this.permits++;\n        }\n    }\n}\n\n// Throttling function calls\nfunction throttle(func, delay) {\n    let timeoutId;\n    let lastExecTime = 0;\n    \n    return function (...args) {\n        const currentTime = Date.now();\n        \n        if (currentTime - lastExecTime > delay) {\n            func.apply(this, args);\n            lastExecTime = currentTime;\n        } else {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => {\n                func.apply(this, args);\n                lastExecTime = Date.now();\n            }, delay - (currentTime - lastExecTime));\n        }\n    };\n}\n\n// Debouncing function calls\nfunction debounce(func, delay) {\n    let timeoutId;\n    \n    return function (...args) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => func.apply(this, args), delay);\n    };\n}\n```\n\n## Modules and NPM\n\n### 1. CommonJS and ES Modules\n\n```javascript\n// math.js (CommonJS)\nfunction add(a, b) {\n    return a + b;\n}\n\nfunction subtract(a, b) {\n    return a - b;\n}\n\nmodule.exports = {\n    add,\n    subtract\n};\n\n// math.mjs (ES Modules)\nexport function add(a, b) {\n    return a + b;\n}\n\nexport function subtract(a, b) {\n    return a - b;\n}\n\nexport default {\n    add,\n    subtract\n};\n\n// index.js (using CommonJS)\nconst math = require('./math');\nconst { add, subtract } = require('./math');\n\nconsole.log(add(5, 3)); // 8\nconsole.log(subtract(10, 4)); // 6\n\n// index.mjs (using ES Modules)\nimport math, { add, subtract } from './math.mjs';\n\nconsole.log(add(5, 3)); // 8\nconsole.log(subtract(10, 4)); // 6\n\n// package.json\n{\n    \"name\": \"my-node-app\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"start\": \"node index.js\",\n        \"dev\": \"nodemon index.js\",\n        \"test\": \"jest\"\n    },\n    \"dependencies\": {\n        \"express\": \"^4.18.2\",\n        \"lodash\": \"^4.17.21\"\n    },\n    \"devDependencies\": {\n        \"nodemon\": \"^3.0.1\",\n        \"jest\": \"^29.6.2\"\n    }\n}\n```\n\n### 2. NPM and Package Management\n\n```javascript\n// Installing packages\n// npm install express\n// npm install --save-dev nodemon\n// npm install -g typescript\n\n// Using installed packages\nconst express = require('express');\nconst _ = require('lodash');\n\nconst app = express();\n\n// Custom module with dependencies\n// utils/logger.js\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.json()\n    ),\n    transports: [\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'combined.log' }),\n        new winston.transports.Console()\n    ]\n});\n\nmodule.exports = logger;\n\n// Using the logger\nconst logger = require('./utils/logger');\n\nlogger.info('Application started');\nlogger.error('Something went wrong');\n```\n\n## File System Operations\n\n### 1. File and Directory Operations\n\n```javascript\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// Reading files\nasync function readFileExample() {\n    try {\n        const data = await fs.readFile('example.txt', 'utf8');\n        console.log('File content:', data);\n    } catch (err) {\n        console.error('Error reading file:', err);\n    }\n}\n\n// Writing files\nasync function writeFileExample() {\n    try {\n        const content = 'Hello, Node.js!';\n        await fs.writeFile('output.txt', content, 'utf8');\n        console.log('File written successfully');\n    } catch (err) {\n        console.error('Error writing file:', err);\n    }\n}\n\n// Directory operations\nasync function directoryExample() {\n    try {\n        // Create directory\n        await fs.mkdir('new-directory', { recursive: true });\n        \n        // Read directory\n        const files = await fs.readdir('.');\n        console.log('Files in current directory:', files);\n        \n        // Get file stats\n        const stats = await fs.stat('package.json');\n        console.log('File stats:', {\n            isFile: stats.isFile(),\n            isDirectory: stats.isDirectory(),\n            size: stats.size,\n            modified: stats.mtime\n        });\n        \n        // Watch file changes\n        const watcher = fs.watch('.', (eventType, filename) => {\n            console.log(`File ${filename} ${eventType}`);\n        });\n        \n        // Stop watching after 10 seconds\n        setTimeout(() => {\n            watcher.close();\n        }, 10000);\n        \n    } catch (err) {\n        console.error('Error with directory operations:', err);\n    }\n}\n\n// Stream operations\nconst { createReadStream, createWriteStream } = require('fs');\n\nfunction copyFileStream(source, destination) {\n    const readStream = createReadStream(source);\n    const writeStream = createWriteStream(destination);\n    \n    readStream.pipe(writeStream);\n    \n    readStream.on('error', (err) => {\n        console.error('Read error:', err);\n    });\n    \n    writeStream.on('error', (err) => {\n        console.error('Write error:', err);\n    });\n    \n    writeStream.on('finish', () => {\n        console.log('File copied successfully');\n    });\n}\n```\n\n## HTTP and Web Servers\n\n### 1. Built-in HTTP Module\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\n// Basic HTTP server\nconst server = http.createServer((req, res) => {\n    const parsedUrl = url.parse(req.url, true);\n    const path = parsedUrl.pathname;\n    const method = req.method;\n    \n    // Set CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    \n    // Route handling\n    if (method === 'GET' && path === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.end('<h1>Hello, Node.js!</h1>');\n    } else if (method === 'GET' && path === '/api/users') {\n        res.writeHead(200, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify([\n            { id: 1, name: 'John Doe' },\n            { id: 2, name: 'Jane Smith' }\n        ]));\n    } else if (method === 'POST' && path === '/api/users') {\n        let body = '';\n        req.on('data', chunk => {\n            body += chunk.toString();\n        });\n        \n        req.on('end', () => {\n            try {\n                const user = JSON.parse(body);\n                res.writeHead(201, { 'Content-Type': 'application/json' });\n                res.end(JSON.stringify({ message: 'User created', user }));\n            } catch (err) {\n                res.writeHead(400, { 'Content-Type': 'application/json' });\n                res.end(JSON.stringify({ error: 'Invalid JSON' }));\n            }\n        });\n    } else {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('Not Found');\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n\n// HTTP client\nfunction makeHttpRequest() {\n    const options = {\n        hostname: 'jsonplaceholder.typicode.com',\n        port: 80,\n        path: '/posts/1',\n        method: 'GET'\n    };\n    \n    const req = http.request(options, (res) => {\n        let data = '';\n        \n        res.on('data', (chunk) => {\n            data += chunk;\n        });\n        \n        res.on('end', () => {\n            console.log('Response:', JSON.parse(data));\n        });\n    });\n    \n    req.on('error', (err) => {\n        console.error('Request error:', err);\n    });\n    \n    req.end();\n}\n```\n\n### 2. Express.js Framework\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\nconst app = express();\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(morgan('combined'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.get('/', (req, res) => {\n    res.json({ message: 'Hello, Express!' });\n});\n\napp.get('/api/users', (req, res) => {\n    const users = [\n        { id: 1, name: 'John Doe', email: 'john@example.com' },\n        { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\n    ];\n    res.json(users);\n});\n\napp.post('/api/users', (req, res) => {\n    const { name, email } = req.body;\n    \n    if (!name || !email) {\n        return res.status(400).json({ error: 'Name and email are required' });\n    }\n    \n    const user = { id: Date.now(), name, email };\n    res.status(201).json(user);\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use((req, res) => {\n    res.status(404).json({ error: 'Route not found' });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Express server running on port ${PORT}`);\n});\n```\n\n## Event-Driven Programming\n\n### 1. EventEmitter\n\n```javascript\nconst EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n\n// Event listeners\nmyEmitter.on('event', (data) => {\n    console.log('Event received:', data);\n});\n\nmyEmitter.once('once-event', (data) => {\n    console.log('This will only fire once:', data);\n});\n\n// Emit events\nmyEmitter.emit('event', { message: 'Hello World' });\nmyEmitter.emit('once-event', { message: 'First time' });\nmyEmitter.emit('once-event', { message: 'Second time' }); // Won't fire\n\n// Custom event emitter\nclass Logger extends EventEmitter {\n    log(message) {\n        this.emit('log', { message, timestamp: new Date() });\n    }\n    \n    error(message) {\n        this.emit('error', { message, timestamp: new Date() });\n    }\n}\n\nconst logger = new Logger();\n\nlogger.on('log', (data) => {\n    console.log(`[LOG] ${data.timestamp}: ${data.message}`);\n});\n\nlogger.on('error', (data) => {\n    console.error(`[ERROR] ${data.timestamp}: ${data.message}`);\n});\n\nlogger.log('Application started');\nlogger.error('Something went wrong');\n```\n\n## Error Handling\n\n### 1. Error Handling Patterns\n\n```javascript\n// Custom error class\nclass AppError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.statusCode = statusCode;\n        this.isOperational = true;\n        \n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n\n// Error handling middleware\nfunction errorHandler(err, req, res, next) {\n    let error = { ...err };\n    error.message = err.message;\n    \n    // Log error\n    console.error(err);\n    \n    // Mongoose bad ObjectId\n    if (err.name === 'CastError') {\n        const message = 'Resource not found';\n        error = new AppError(message, 404);\n    }\n    \n    // Mongoose duplicate key\n    if (err.code === 11000) {\n        const message = 'Duplicate field value entered';\n        error = new AppError(message, 400);\n    }\n    \n    // Mongoose validation error\n    if (err.name === 'ValidationError') {\n        const message = Object.values(err.errors).map(val => val.message);\n        error = new AppError(message, 400);\n    }\n    \n    res.status(error.statusCode || 500).json({\n        success: false,\n        error: error.message || 'Server Error'\n    });\n}\n\n// Async error wrapper\nconst asyncHandler = (fn) => (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n// Usage example\napp.get('/api/users/:id', asyncHandler(async (req, res, next) => {\n    const user = await User.findById(req.params.id);\n    \n    if (!user) {\n        return next(new AppError('User not found', 404));\n    }\n    \n    res.json({\n        success: true,\n        data: user\n    });\n}));\n\n// Global error handler\nprocess.on('unhandledRejection', (err, promise) => {\n    console.log('Unhandled Rejection at:', promise, 'reason:', err);\n    // Close server & exit process\n    server.close(() => {\n        process.exit(1);\n    });\n});\n\nprocess.on('uncaughtException', (err) => {\n    console.log('Uncaught Exception:', err);\n    process.exit(1);\n});\n```\n\n## Best Practices\n\n### 1. Code Organization\n\n```javascript\n// Project structure\n// src/\n//   controllers/\n//     userController.js\n//   models/\n//     User.js\n//   routes/\n//     userRoutes.js\n//   middleware/\n//     auth.js\n//   utils/\n//     logger.js\n//   app.js\n//   server.js\n\n// userController.js\nconst User = require('../models/User');\nconst AppError = require('../utils/AppError');\n\nexports.getAllUsers = async (req, res, next) => {\n    try {\n        const users = await User.find();\n        res.json({\n            success: true,\n            count: users.length,\n            data: users\n        });\n    } catch (err) {\n        next(err);\n    }\n};\n\nexports.getUser = async (req, res, next) => {\n    try {\n        const user = await User.findById(req.params.id);\n        \n        if (!user) {\n            return next(new AppError('User not found', 404));\n        }\n        \n        res.json({\n            success: true,\n            data: user\n        });\n    } catch (err) {\n        next(err);\n    }\n};\n\n// Environment configuration\nconst config = {\n    development: {\n        port: 3000,\n        db: 'mongodb://localhost:27017/myapp_dev'\n    },\n    production: {\n        port: process.env.PORT || 3000,\n        db: process.env.MONGODB_URI\n    }\n};\n\nconst env = process.env.NODE_ENV || 'development';\nmodule.exports = config[env];\n```\n\n## Follow-up Questions\n\n### 1. JavaScript Features\n**Q: What's the difference between `let`, `const`, and `var`?**\nA: `let` and `const` are block-scoped, while `var` is function-scoped. `const` cannot be reassigned, `let` can be reassigned, and `var` can be reassigned and is hoisted.\n\n### 2. Asynchronous Programming\n**Q: When should you use Promises vs async/await?**\nA: Use async/await for cleaner, more readable code when dealing with sequential async operations. Use Promises for parallel operations or when you need more control over the execution flow.\n\n### 3. Node.js Runtime\n**Q: What's the difference between `setImmediate` and `setTimeout`?**\nA: `setImmediate` executes in the check phase of the event loop, while `setTimeout` executes in the timer phase. `setImmediate` is generally faster for I/O operations.\n\n## Sources\n\n### Books\n- **Node.js in Action** by Mike Cantelon, Marc Harter, T.J. Holowaychuk, Nathan Rajlich\n- **You Don't Know JS** by Kyle Simpson\n- **JavaScript: The Good Parts** by Douglas Crockford\n\n### Online Resources\n- **Node.js Documentation** - https://nodejs.org/docs/\n- **MDN Web Docs** - https://developer.mozilla.org/\n- **Node.js Best Practices** - https://github.com/goldbergyoni/nodebestpractices\n\n## Projects\n\n### 1. REST API\n**Objective**: Build a RESTful API\n**Requirements**: Express.js, MongoDB, authentication\n**Deliverables**: Complete API with CRUD operations\n\n### 2. Real-time Chat\n**Objective**: Create a real-time chat application\n**Requirements**: Socket.io, WebSockets, rooms\n**Deliverables**: Multi-room chat application\n\n### 3. File Upload Service\n**Objective**: Build a file upload and management service\n**Requirements**: Multer, file validation, cloud storage\n**Deliverables**: File upload API with storage\n\n---\n\n**Next**: [Data Structures & Algorithms](./dsa-questions-golang-nodejs.md) | **Previous**: [Go Fundamentals](./go-fundamentals.md) | **Up**: [Phase 0](../README.md)\n\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\n\ncontinue\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\n\ncontinue\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue\n\ncontinue",
      "timestamp": 1758020866993,
      "metadata": {
        "uri": "file:///Users/fc20136/Downloads/Razorpay_prep/09_curriculum/phase0_fundamentals/programming/nodejs-fundamentals.md",
        "language": "markdown",
        "lineCount": 1692
      }
    }
  ],
  "lastMessageId": "msg_1758020866993_m428ru2ys",
  "conversationId": "conv_1758020863564_97bhhbo8b",
  "createdAt": 1758020863564,
  "lastUpdated": 1758020866993,
  "version": "1.0.0",
  "backupTime": 1758020919889,
  "backupId": "backup_1758020919889"
}